$break-points: (
    'isHandheld': ('min': 0px, 'max': 768px),
    'isMobile':  ('min': 0px, 'max': 425px),
        'mobile-s': ('min': 0px, 'max': 425px),        
        'mobile-m': ('min': 0px, 'max': 425px),
        'mobile-l': ('min': 0px, 'max': 425px), 
    'isTablet': ('min': 425px, 'max': 768px),
    'isDesktop': ('min': 1024px),
        'desktop-s': ('min': 1440px, 'max': 1920px),
        'desktop-m': ('min': 1920px, 'max': 2500px),
        'desktop-l': ('min': 2500px)
);

/*
    Cleaner way of implemnting Media Queries
    @inclide BreakPoint('mobile-s') || @inclide BreakPoint(('mobile-s', 'mobile-m')) ||  @inclide BreakPoint(['mobile-s', 'mobile-m'])
*/
@mixin BreakPoint($breakpoints, $isScreen: false)
{
    @each $point in $breakpoints
    {
        $breakpoint: map-get($break-points, $point);

        @if ($breakpoint == null)
        {
            @error $point + " not found in map";
        }
        @else
        {
            $min: map-get($breakpoint, "min");
            $max: map-get($breakpoint, "max");
            
            @if ($isScreen)
            {
                @media screen and (min-width: $min) and (max-width: $max)
                {
                    @content;
                }
            }
            @else
            {
                @if ($min != null && $max == null)
                {
                    @media (min-width: $min)
                    {
                        @content;
                    }
                }
                @else
                {
                    @media (min-width: $min) and (max-width: $max)
                    {
                        @content;
                    }
                }
            }
        }
    }
}
// Shorthand of @include BreakPoint()
@mixin bp($breakpoints, $isScreen: false)
{
    @include BreakPoint($breakpoints, $isScreen)
    {
        @content;
    }
}

// Clean way of adding a custom media query
@mixin custom-breakpoint($min, $max)
{
    @media (min-width: $min) and (max-width: $max)
    {
        @content;
    }
}

/*
    Test Mixin
*/
@mixin Rainbow()
{
    @each $name, $value in $break-points
    {
        @include bp($name)
        {
            body
            {
                background-color: RandomColor();
            }
        }
    }
}

@mixin transition($what: all, $time: 0.2s, $how: ease-in-out)
{
    -webkit-transition: $what $time $how;
    -moz-transition:    $what $time $how;
    -ms-transition:     $what $time $how;
    -o-transition:      $what $time $how;
    transition:         $what $time $how;
}

@mixin prefixer($property, $value, $prefixes: ())
{
  @each $prefix in $prefixes
  {
    #{"-" + $prefix + "-" + $property}: $value;
  }

  #{$property}: $value;
}

@mixin rem($property, $values...)
{
    $n: length($values);
    $i: 1;

    $pxlist: ();
    $remlist: ();

    @while $i <= $n
    {
        $itemVal: (nth($values, $i));

        @if $itemVal != "auto"
        {
            $pxlist: append($pxlist, $itemVal + px);
            $remlist: append($remlist, ($itemVal / 10) + rem);
        }
        @else
        {
            $pxlist: append($pxlist, auto);
            $remlist: append($remlist, auto);
        }

        $i: $i + 1;
    }

    #{$property}: $pxlist;
    #{$property}: $remlist;
}

@mixin border-radius($size)
{
    -webkit-border-radius: $size + px;
    -moz-border-radius: $size + px;
    border-radius: $size + px;
}

@mixin opacity($opacity)
{
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin placeholder
{
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}
